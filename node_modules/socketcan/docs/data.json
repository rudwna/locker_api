{
    "project": {},
    "files": {
        "src/raw.h": {
            "name": "src/raw.h",
            "modules": {
                "CAN": 1
            },
            "classes": {
                "RawChannel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "can.js": {
            "name": "can.js",
            "modules": {
                "Signals": 1
            },
            "classes": {
                "Signal": 1,
                "Message": 1,
                "DatabaseService": 1
            },
            "fors": {
                "exports": 1,
                "Signal": 1,
                "DatabaseService": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "CAN": {
            "name": "CAN",
            "submodules": {},
            "classes": {
                "RawChannel": 1
            },
            "fors": {
                "exports": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/raw.h",
            "line": 51,
            "description": "Basic CAN access"
        },
        "Signals": {
            "name": "Signals",
            "submodules": {},
            "classes": {
                "exports": 1,
                "Signal": 1,
                "Message": 1,
                "DatabaseService": 1
            },
            "fors": {
                "Signal": 1,
                "DatabaseService": 1,
                "exports": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "can.js",
            "line": 163,
            "description": "The Signals modules provides an interface to access the values/signals\nencoded in CAN messages."
        }
    },
    "classes": {
        "RawChannel": {
            "name": "RawChannel",
            "shortname": "RawChannel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CAN",
            "namespace": "",
            "file": "src/raw.h",
            "line": 51,
            "description": "A Raw channel to access a certain CAN channel (e.g. vcan0) via CAN messages."
        },
        "exports": {
            "name": "exports",
            "shortname": "exports",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Signals",
            "namespace": ""
        },
        "Signal": {
            "name": "Signal",
            "shortname": "Signal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Signals",
            "namespace": "",
            "file": "can.js",
            "line": 47,
            "description": "The actual signal."
        },
        "Message": {
            "name": "Message",
            "shortname": "Message",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Signals",
            "namespace": "",
            "file": "can.js",
            "line": 115,
            "description": "Just a container to keep the Signals."
        },
        "DatabaseService": {
            "name": "DatabaseService",
            "shortname": "DatabaseService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Signals",
            "namespace": "",
            "file": "can.js",
            "line": 163,
            "description": "A DatabaseService is usually generated once per bus to collect signals\ncoded in the CAN messages according a DB description.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "channel",
                    "description": "RAW channel"
                },
                {
                    "name": "db_desc",
                    "description": "Set of rules to decode/encode signals (@parse_kcd.js)"
                }
            ],
            "return": {
                "description": "a new DatabaseService"
            }
        }
    },
    "classitems": [
        {
            "file": "src/raw.h",
            "line": 64,
            "description": "Create a new CAN channel object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "interface",
                    "description": "interface name to create channel on (e.g. can0)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "new RawChannel object"
            },
            "class": "RawChannel",
            "module": "CAN"
        },
        {
            "file": "src/raw.h",
            "line": 72,
            "description": "Add listener to receive certain notifications",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "event",
                    "description": "onMessage to register for incoming messages",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "JS callback object",
                    "type": "Any"
                },
                {
                    "name": "instance",
                    "description": "Optional instance pointer to call callback",
                    "type": "Any"
                }
            ],
            "class": "RawChannel",
            "module": "CAN"
        },
        {
            "file": "src/raw.h",
            "line": 81,
            "description": "Start operation on this CAN channel",
            "itemtype": "method",
            "name": "start",
            "class": "RawChannel",
            "module": "CAN"
        },
        {
            "file": "src/raw.h",
            "line": 87,
            "description": "Stop any operations on this CAN channel",
            "itemtype": "method",
            "name": "stop",
            "class": "RawChannel",
            "module": "CAN"
        },
        {
            "file": "src/raw.h",
            "line": 93,
            "description": "Send a CAN message immediately",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "message",
                    "description": "JSON object describing the CAN message, keys are id, length, data {Buffer}, ext or rtr",
                    "type": "Object"
                }
            ],
            "class": "RawChannel",
            "module": "CAN"
        },
        {
            "file": "src/raw.h",
            "line": 100,
            "description": "Set a list of active filters to be applied for incoming messages",
            "itemtype": "method",
            "name": "setRxFilters",
            "params": [
                {
                    "name": "filters",
                    "description": "single filter or array of filter e.g. { id: 0x1ff, mask: 0x1ff, invert: false}, result of (id & mask)",
                    "type": "Object"
                }
            ],
            "class": "RawChannel",
            "module": "CAN"
        },
        {
            "file": "can.js",
            "line": 28,
            "itemtype": "method",
            "name": "createRawChannel",
            "params": [
                {
                    "name": "channel",
                    "description": "Channel name (e.g. vcan0)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a new channel object or exception",
                "type": "RawChannel"
            },
            "class": "exports",
            "module": "CAN"
        },
        {
            "file": "can.js",
            "line": 53,
            "description": "Symbolic name",
            "itemtype": "attribute",
            "name": "name",
            "final": 1,
            "class": "Signal",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 71,
            "description": "Current value",
            "itemtype": "attribute",
            "name": "value",
            "final": 1,
            "class": "Signal",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 83,
            "description": "Keep track of listeners who want to be notified if this signal changes",
            "itemtype": "method",
            "name": "onChange",
            "params": [
                {
                    "name": "listener",
                    "description": "JS callback to get notification"
                }
            ],
            "class": "Signal",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 93,
            "description": "Set new value of this signal. Any local registered clients will\nreceive a notification. Please note, no CAN message is actually\nsend to the bus (@see DatabaseServer::send)",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "newValue",
                    "description": "New value to set",
                    "type": "Bool|double|integer"
                }
            ],
            "class": "Signal",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 121,
            "description": "CAN identifier",
            "itemtype": "attribute",
            "name": "id",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 128,
            "description": "Extended Frame Format used",
            "itemtype": "attribute",
            "name": "ext",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 135,
            "description": "Symbolic name",
            "itemtype": "attribute",
            "name": "name",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 142,
            "description": "Length in bytes of resulting CAN message",
            "itemtype": "attribute",
            "name": "length",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 149,
            "description": "Named array of signals within this message. Accessible via index and name.",
            "itemtype": "attribute",
            "name": "signals",
            "type": "Signal",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 176,
            "description": "Named array of known messages. Accessible via index and name.",
            "itemtype": "attribute",
            "name": "messages",
            "type": "Message",
            "class": "DatabaseService",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 225,
            "description": "Construct a CAN message and encode all related signals according\nthe rules. Finally send the message to the bus.",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "msg_name",
                    "description": "Name of the message to generate"
                }
            ],
            "class": "DatabaseService",
            "module": "Signals"
        },
        {
            "file": "can.js",
            "line": 269,
            "itemtype": "method",
            "name": "parseNetworkDescription",
            "params": [
                {
                    "name": "file",
                    "description": "Path to KCD file to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "DB description to be used in DatabaseService"
            },
            "class": "exports",
            "module": "Signals"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nCreate a new CAN channel object",
            "line": " src/raw.h:64"
        }
    ]
}